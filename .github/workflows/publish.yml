name: Build and Publish

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  packages: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Upgrade pip and install build tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install "setuptools>=61.0,<75.0" wheel build twine

      # ========== DEBUGGING SECTION START ==========
      
      - name: Debug - Show repository structure
        run: |
          echo "=== Repository root contents ==="
          ls -la
          echo ""
          echo "=== All Python files in repo ==="
          find . -name "*.py" -type f
          echo ""

      - name: Debug - Check package directory
        run: |
          echo "=== Checking sprechstimme directory ==="
          if [ -d "sprechstimme" ]; then
            echo "✓ sprechstimme directory exists"
            ls -la sprechstimme/
          else
            echo "✗ ERROR: sprechstimme directory NOT found!"
            exit 1
          fi
          echo ""

      - name: Debug - Check __init__.py
        run: |
          echo "=== Checking for __init__.py ==="
          if [ -f "sprechstimme/__init__.py" ]; then
            echo "✓ __init__.py exists"
            echo "Content:"
            cat sprechstimme/__init__.py
          else
            echo "✗ WARNING: __init__.py NOT found!"
            echo "Creating empty __init__.py..."
            touch sprechstimme/__init__.py
          fi
          echo ""

      - name: Debug - Validate pyproject.toml
        run: |
          echo "=== pyproject.toml content ==="
          cat pyproject.toml
          echo ""
          echo "=== Validating pyproject.toml syntax ==="
          python -c "import tomllib; f=open('pyproject.toml','rb'); tomllib.load(f); print('✓ Valid TOML syntax')" 2>&1 || \
          python -c "import tomli; f=open('pyproject.toml','rb'); tomli.load(f); print('✓ Valid TOML syntax')" 2>&1 || \
          python -c "import toml; toml.load('pyproject.toml'); print('✓ Valid TOML syntax')" 2>&1 || \
          echo "Could not validate TOML (parser not available, but build will try anyway)"
          echo ""

      - name: Debug - Check setuptools version
        run: |
          echo "=== Setuptools version ==="
          python -c "import setuptools; print(f'setuptools version: {setuptools.__version__}')"
          echo ""

      - name: Debug - Check README
        run: |
          echo "=== Checking README.md ==="
          if [ -f "README.md" ]; then
            echo "✓ README.md exists"
            echo "Size: $(wc -c < README.md) bytes"
          else
            echo "✗ WARNING: README.md NOT found!"
          fi
          echo ""

      - name: Debug - Test setuptools package discovery
        run: |
          echo "=== Testing setuptools package discovery ==="
          python -c "
          from setuptools import find_packages
          packages = find_packages(where='.')
          print(f'Found packages: {packages}')
          if 'sprechstimme' in packages:
              print('✓ sprechstimme package discovered')
          else:
              print('✗ ERROR: sprechstimme package NOT discovered!')
          "
          echo ""

      # ========== BUILD SECTION ==========

      - name: Build sdist and wheel (verbose)
        run: |
          echo "=== Building distribution packages ==="
          python -m build --sdist --wheel --verbose
          echo ""
          echo "✓ Build completed"

      - name: Debug - List built distributions
        run: |
          echo "=== Contents of dist/ directory ==="
          ls -lh dist/
          echo ""
          echo "=== File details ==="
          for file in dist/*; do
            echo "File: $file"
            echo "Size: $(du -h "$file" | cut -f1)"
            echo ""
          done

      - name: Debug - Inspect wheel contents
        run: |
          echo "=== Listing all files inside wheel ==="
          unzip -l dist/sprechstimme-*-py3-none-any.whl
          echo ""

      - name: Debug - Extract and check METADATA
        run: |
          echo "=== Extracting METADATA from wheel ==="
          unzip -p dist/sprechstimme-*-py3-none-any.whl '*/METADATA' > /tmp/metadata.txt || {
            echo "✗ ERROR: Could not extract METADATA from wheel!"
            exit 1
          }
          echo ""
          echo "=== Full METADATA content ==="
          cat /tmp/metadata.txt
          echo ""
          echo "=== Checking for required fields ==="
          if grep -q "^Name:" /tmp/metadata.txt; then
            echo "✓ Name field found: $(grep '^Name:' /tmp/metadata.txt)"
          else
            echo "✗ ERROR: Name field MISSING!"
          fi
          if grep -q "^Version:" /tmp/metadata.txt; then
            echo "✓ Version field found: $(grep '^Version:' /tmp/metadata.txt)"
          else
            echo "✗ ERROR: Version field MISSING!"
          fi
          echo ""
          echo "=== Checking Metadata-Version ==="
          METADATA_VERSION=$(grep "^Metadata-Version:" /tmp/metadata.txt | cut -d' ' -f2)
          echo "Metadata-Version: $METADATA_VERSION"
          if [[ "$METADATA_VERSION" == "2.4" ]]; then
            echo "⚠ WARNING: Metadata-Version 2.4 detected - PyPI may not support this yet"
            echo "Recommendation: Pin setuptools to <75.0 in pyproject.toml"
          elif [[ "$METADATA_VERSION" =~ ^2\.[0-3]$ ]]; then
            echo "✓ Metadata-Version is compatible with PyPI"
          fi
          echo ""

      - name: Debug - Validate with twine check
        run: |
          echo "=== Running twine check ==="
          python -m twine check dist/* --strict
          echo ""
          echo "✓ Twine check passed"

      - name: Debug - Show package metadata
        run: |
          echo "=== Inspecting package with pkginfo ==="
          python -m pip install pkginfo
          python -c "
          from pkginfo import Wheel
          import glob
          wheel_file = glob.glob('dist/*.whl')[0]
          w = Wheel(wheel_file)
          print(f'Name: {w.name}')
          print(f'Version: {w.version}')
          print(f'Summary: {w.summary}')
          print(f'Author: {w.author}')
          print(f'Metadata-Version: {w.metadata_version}')
          " || echo "Could not inspect with pkginfo"
          echo ""

      # ========== PUBLISH SECTION ==========

      - name: Publish to PyPI with twine
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "=== Publishing to PyPI ==="
          python -m twine upload dist/* --skip-existing --verbose
